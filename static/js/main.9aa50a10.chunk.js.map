{"version":3,"sources":["utils/Utils.tsx","model/Coin.tsx","ajax/CoinsApi.tsx","components/TableHeaderSortable/TableHeaderSortable.tsx","components/CoinTable/CoinTable.tsx","components/CurrencySelector/CurrencySelector.tsx","config/Constants.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["formatPrice","price","currency","toLocaleString","style","Coin","symbol","currentPrice","openingPrice","getCurrentPrice","getOpeningPrice","getPriceIncrease","priceInc","toFixed","this","fetchCoins","cryptoCoins","a","coinsParam","join","url","fetch","method","headers","res","json","elem","data","result","coin","push","console","error","library","add","faArrowDown","faArrowUp","TableHeaderSortable","caption","isDescending","isActive","onClick","className","icon","initialState","sortBySymbolDescending","sortByCurrentPriceDescending","sortByOpeningPriceDescending","sortByPriceIncDescending","coins","activeSort","sortNumbers","sortKey","descending","sort","b","reducer","state","action","type","payload","localeCompare","Error","CoinTable","useReducer","dispatch","useEffect","map","key","CurrencySelector","currencies","current","onChange","value","COINS_TO_FETCH","CURRENCIES","App","useState","setCurrency","setCoins","then","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9aa50a10.chunk.js","sourcesContent":["export const formatPrice = (price: number, currency: string): string => price.toLocaleString(\"en-US\", { style: \"currency\", currency });\n","import { formatPrice } from \"../utils/Utils\";\n\nclass Coin {\n    constructor(public symbol: string, public currentPrice: number, public openingPrice: number) { }\n\n    get priceInc() {\n        const priceInc = this.currentPrice - this.openingPrice;\n        return (priceInc / this.openingPrice) * 100;\n    }\n\n    getCurrentPrice = (currency: string): string => formatPrice(this.currentPrice, currency)\n\n    getOpeningPrice = (currency: string): string => formatPrice(this.openingPrice, currency)\n\n    getPriceIncrease = (currency: string): string => `${this.priceInc.toFixed(3)}% (${formatPrice(this.priceInc, currency)})`;\n}\n\nexport default Coin;","import Coin from \"../model/Coin\";\n\nconst CRYPTO_COMPARE_API_URL = \"https://min-api.cryptocompare.com/data/\";\n\nexport const fetchCoins = async (currency: string, cryptoCoins: Array<string>): Promise<Array<Coin>> => {\n    const coinsParam = cryptoCoins.join(\",\");\n    const url = `${CRYPTO_COMPARE_API_URL}pricemultifull?fsyms=${coinsParam}&tsyms=${currency}`;\n\n    try {\n        const res = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        });\n\n        let data: any = await res.json();\n        data = data[\"RAW\"];\n\n        const result: Array<Coin> = [];\n\n        for (let elem in data) {\n            const coin = new Coin(elem, data[elem][currency][\"PRICE\"], data[elem][currency][\"OPENDAY\"]);\n            result.push(coin);\n        }\n\n        return result;\n\n    } catch (e) {\n        console.error(\"Fetch coins data failed!\");\n        throw e;\n    }\n};\n","import React from \"react\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nlibrary.add(faArrowDown, faArrowUp);\n\ninterface TableHeaderSortableProps {\n    caption: string;\n    isDescending: boolean;\n    isActive: boolean;\n    onClick: (e: React.MouseEvent<HTMLElement>) => void\n};\n\nconst TableHeaderSortable = ({ caption, isDescending = false, isActive = false, onClick }: TableHeaderSortableProps) => (\n    <th className=\"table-header-sortable\" onClick={onClick}>\n        {caption} {isActive ? (<FontAwesomeIcon icon={isDescending ? \"arrow-down\" : \"arrow-up\"} />) : null}\n    </th>\n);\n\nexport default TableHeaderSortable;","import React, { useEffect, useReducer } from \"react\";\nimport Coin from '../../model/Coin';\nimport TableHeaderSortable from \"../TableHeaderSortable/TableHeaderSortable\";\nimport \"./CoinTable.css\";\n\ninterface CoinTableProps {\n    currency: string;\n    coins: Coin[];\n};\n\ntype ActionType =\n    | { type: \"updateCoins\", payload: Coin[] }\n    | { type: \"sortBySymbol\" }\n    | { type: \"sortByCurrentPrice\" }\n    | { type: \"sortByOpeningPrice\" }\n    | { type: \"sortByPriceInc\" };\n\nconst initialState = {\n    sortBySymbolDescending: false,\n    sortByCurrentPriceDescending: false,\n    sortByOpeningPriceDescending: false,\n    sortByPriceIncDescending: false,\n    coins: [] as Coin[],\n    activeSort: \"\"\n};\n\nconst sortNumbers = (coins: Coin[], sortKey: string, descending: boolean): Coin[] => {\n    if (descending) {\n        coins.sort((a: any, b: any) => (a[sortKey] - b[sortKey]) * -1);\n    } else {\n        coins.sort((a: any, b: any) => a[sortKey] - b[sortKey]);\n    }\n    return coins;\n}\n\nconst sortStrings = (coins: Coin[], sortKey: string, descending: boolean): Coin[] => {\n    if (descending) {\n        coins.sort((a: any, b: any) => a[sortKey].localeCompare(b[sortKey]) * -1);\n    } else {\n        coins.sort((a: any, b: any) => a[sortKey].localeCompare(b[sortKey]));\n    }\n    return coins;\n}\n\nfunction reducer(state: typeof initialState, action: ActionType) {\n    switch (action.type) {\n        case \"updateCoins\":\n            return { ...initialState, coins: action.payload };\n        case \"sortBySymbol\":\n            return { ...initialState, coins: sortStrings([...state.coins], \"symbol\", !state.sortBySymbolDescending), sortBySymbolDescending: !state.sortBySymbolDescending, activeSort: \"symbol\" };\n        case \"sortByCurrentPrice\":\n            return { ...initialState, coins: sortNumbers([...state.coins], \"currentPrice\", !state.sortByCurrentPriceDescending), sortByCurrentPriceDescending: !state.sortByCurrentPriceDescending, activeSort: \"currentPrice\" };\n        case \"sortByOpeningPrice\":\n            return { ...initialState, coins: sortNumbers([...state.coins], \"openingPrice\", !state.sortByOpeningPriceDescending), sortByOpeningPriceDescending: !state.sortByOpeningPriceDescending, activeSort: \"openingPrice\" };\n        case \"sortByPriceInc\":\n            return { ...initialState, coins: sortNumbers([...state.coins], \"priceInc\", !state.sortByPriceIncDescending), sortByPriceIncDescending: !state.sortByPriceIncDescending, activeSort: \"priceInc\" };\n        default:\n            throw new Error();\n    }\n}\n\nconst CoinTable = ({ currency, coins }: CoinTableProps) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { sortBySymbolDescending, sortByCurrentPriceDescending, sortByOpeningPriceDescending, sortByPriceIncDescending, activeSort } = state;\n\n    useEffect(() => {\n        dispatch({ type: \"updateCoins\", payload: coins });\n    }, [coins]);\n\n    return (\n        <table className=\"coin-table\">\n            <thead>\n                <tr>\n                    <TableHeaderSortable caption=\"Coin Name\" isDescending={sortBySymbolDescending} isActive={activeSort === \"symbol\"} onClick={() => dispatch({ type: \"sortBySymbol\" })} />\n                    <TableHeaderSortable caption={`Current Price (${currency})`} isDescending={sortByCurrentPriceDescending} isActive={activeSort === \"currentPrice\"} onClick={() => dispatch({ type: \"sortByCurrentPrice\" })} />\n                    <TableHeaderSortable caption={`Opening Price (${currency})`} isDescending={sortByOpeningPriceDescending} isActive={activeSort === \"openingPrice\"} onClick={() => dispatch({ type: \"sortByOpeningPrice\" })} />\n                    <TableHeaderSortable caption=\"Price Increase\" isDescending={sortByPriceIncDescending} isActive={activeSort === \"priceInc\"} onClick={() => dispatch({ type: \"sortByPriceInc\" })} />\n                </tr>\n            </thead>\n            <tbody>\n                {state.coins.map((coin: Coin) =>\n                    <tr key={coin.symbol}>\n                        <td>{coin.symbol}</td>\n                        <td>{coin.getCurrentPrice(currency)}</td>\n                        <td>{coin.getOpeningPrice(currency)}</td>\n                        <td>{coin.getPriceIncrease(currency)}</td>\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nexport default CoinTable;","import React from \"react\";\n\ninterface CurrencySelectorProps {\n    currencies: Array<string>;\n    current: string;\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nconst CurrencySelector = ({ currencies, current, onChange }: CurrencySelectorProps) => {\n    return (\n        <form className=\"currency-selector\">\n            <label>Select currency&nbsp;\n                <select value={current} onChange={onChange}>\n                    {currencies.map((currency: string) => <option key={currency} value={currency}>{currency}</option>)}\n                </select>\n            </label>\n        </form>\n    );\n};\n\nexport default CurrencySelector;","export const COINS_TO_FETCH = [\"BTC\", \"XRP\", \"ETH\", \"USDT\", \"BNB\", \"BCH\", \"LINK\", \"DOT\", \"LTC\", \"ADA\"];\nexport const CURRENCIES = [\"USD\", \"EUR\", \"GBP\"];","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport { fetchCoins } from './ajax/CoinsApi';\nimport './App.css';\nimport CoinTable from './components/CoinTable/CoinTable';\nimport CurrencySelector from './components/CurrencySelector/CurrencySelector';\nimport { COINS_TO_FETCH, CURRENCIES } from './config/Constants';\nimport Coin from './model/Coin';\n\nfunction App() {\n  const [currency, setCurrency] = useState(\"USD\");\n  const [coins, setCoins] = useState<Array<Coin>>([]);\n\n  useEffect(() => {\n    fetchCoins(currency, COINS_TO_FETCH).then(res => {\n      setCoins(res);\n    })\n  }, [currency]);\n\n  return (\n    <div className=\"App\">\n      <CurrencySelector currencies={CURRENCIES} current={currency} onChange={(e: ChangeEvent<HTMLSelectElement>): void => setCurrency(e.target.value)} />\n      <CoinTable currency={currency} coins={coins} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}